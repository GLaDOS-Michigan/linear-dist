{
  "InitImpliesMonotonicityInv": 
    [ 
      "lemma InitImpliesMonotonicityInv(c: Constants, v: Variables)",
      "  requires Init(c, v)",
      "  ensures MonotonicityInv(c, v)",
      "{}"
    ],
  "InitImpliesMessageInvHeader":
    [
      "lemma InitImpliesMessageInv(c: Constants, v: Variables)",
      "  requires Init(c, v)",
      "  ensures MessageInv(c, v)",
      "{",
      "  InitImpliesValidVariables(c, v);"
    ],
  "MonotonicityInvInductive":
    [
      "lemma MonotonicityInvInductive(c: Constants, v: Variables, v': Variables)",
      "  requires MonotonicityInv(c, v)",
      "  requires Next(c, v, v')",
      "  ensures MonotonicityInv(c, v')",
      "{",
      "  VariableNextProperties(c, v, v');",
      "}"
    ],
  "MessageInvInductiveHeader":
    [
      "lemma MessageInvInductive(c: Constants, v: Variables, v': Variables)",
      "  requires MessageInv(c, v)",
      "  requires Next(c, v, v')",
      "  ensures MessageInv(c, v')"
    ],
  "VariableNextProperties":
    [
      "lemma VariableNextProperties(c: Constants, v: Variables, v': Variables)", 
      "  requires v.WF(c)",
      "  requires Next(c, v, v')",
      "  ensures 1 < |v'.history|",
      "  ensures |v.history| == |v'.history| - 1",
      "  ensures v.Last() == v.History(|v'.history|-2) == v'.History(|v'.history|-2)",
      "  ensures forall i | 0 <= i < |v'.history|-1 :: v.History(i) == v'.History(i)",
      "{",
      "  assert 0 < |v.history|;",
      "  assert 1 < |v'.history|;",
      "}"
    ],
  "NetworkModule":
    [
      "module Network {",
      "  import opened Types",
      "",
      "  datatype Variables = Variables(sentMsgs:set<Message>)",
      "",
      "  ghost predicate Init(v: Variables) {",
      "    && v.sentMsgs == {}",
      "  }",
      "",
      "  ghost predicate Next(v: Variables, v': Variables, msgOps: MessageOps)",
      "  {",
      "    && (msgOps.recv.Some? ==> msgOps.recv.value in v.sentMsgs)",
      "    && v'.sentMsgs ==",
      "      v.sentMsgs + if msgOps.send.None? then {} else { msgOps.send.value }",
      "  }",
      "}  // end module Network"
    ],
  "DatatypeVariables":
    [
      "datatype Variables = Variables(",
      "  history: seq<Hosts>,",
      "  network: Network.Variables",
      ") {",
      "",
      "  ghost predicate ValidHistoryIdx(i: int) {",
      "    0 <= i < |history|",
      "  }",
      "",
      "  ghost predicate ValidHistoryIdxStrict(i: int) {",
      "    0 <= i < |history|-1",
      "  }",
      "",
      "  ghost predicate WF(c: Constants) {",
      "    && c.WF()",
      "    && 0 < |history|",
      "    && (forall i | ValidHistoryIdx(i) :: history[i].WF(c))",
      "  }",
      "",
      "  ghost function Last() : (h: Hosts)",
      "    requires 0 < |history|",
      "    ensures h == history[|history|-1]",
      "    ensures h == History(|history|-1)",
      " {",
      "    UtilitiesLibrary.Last(history)",
      "  }",
      "",
      "  ghost function History(i: int) : (h: Hosts)",
      "    requires ValidHistoryIdx(i)",
      "    ensures h == history[i]",
      "  {",
      "    history[i]",
      "  }",
      "}  // end datatype Variables"
    ]
}